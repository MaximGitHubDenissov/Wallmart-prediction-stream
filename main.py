import streamlit as st
import pandas as pd
from datetime import datetime
import joblib
import numpy as np



# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="Weekly_Sales Prediction App",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded",
)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
uploaded_file = None

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö session state
if 'df_input' not in st.session_state:
    st.session_state['df_input'] = pd.DataFrame()

if 'df_predicted' not in st.session_state:
    st.session_state['df_predicted'] = pd.DataFrame()

if 'tab_selected' not in st.session_state:
    st.session_state['tab_selected'] = None

def reset_session_state():
    st.session_state['df_input'] = pd.DataFrame()
    st.session_state['df_predicted'] = pd.DataFrame()

# ML section start

# linear regression model
model_file_path = r'C:\Users\77017\OneDrive\–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª\AI_projects\wallmart-predict-app\final_model2.sav'
model = joblib.load(open(model_file_path, 'rb'))


@st.cache_data
def predict_sales_df(df_input):
    df_input.drop(['Unnamed: 0'],axis=1,inplace=True)
    df_original = df_input.copy()
    df_input['Date'] = pd.to_datetime(df_input['Date'])
    df_input['Date'] = df_input['Date'].dt.strftime('%Y-%m-%d')
    df_input['Week'] = df_input['Date'].apply(lambda x: datetime.strptime(x, '%Y-%m-%d').strftime('%V'))
    df_input.drop(['Date'],axis=1,inplace=True)
    df_input.drop(['Weekly_Sales'],axis=1,inplace=True)
    y_pred = model.predict(df_input)
    y_pred = np.expm1(y_pred).round(1)
    df_original['Weekly_Sales_predicted'] = y_pred
    
    return df_original
@st.cache_data
def predict_sales_one(df_input):
    df_original = df_input.copy()
    df_input['Date'] = pd.to_datetime(df_input['Date'])
    df_input['Date'] = df_input['Date'].dt.strftime('%Y-%m-%d')
    df_input['Week'] = df_input['Date'].apply(lambda x: datetime.strptime(x, '%Y-%m-%d').strftime('%V'))
    y_pred = model.predict(df_input.drop(['Date'],axis=1))
    y_pred = np.expm1(y_pred).round(1)
    df_original['Weekly_Sales_predicted'] = y_pred
    
    return df_original


@st.cache_data
def convert_df(df):
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞ –≤ csv
    return df.to_csv(index=False).encode('utf-8')

# Sidebar section start
# –°–∞–π–¥–±–∞—Ä –±–ª–æ–∫
with st.sidebar:
    st.title('üóÇ –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö')
    
    tab1, tab2 = st.tabs(['üìÅ –î–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞', 'üìù –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é'])
    with tab1:
        # –í–∫–ª–∞–¥–∫–∞ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π —Ñ–∞–π–ª–∞, –≤—ã–±–æ—Ä–æ–º –ø–æ—Ä–æ–≥–∞ –∏ –∫–Ω–æ–ø–∫–æ–π –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è (–≤–∫–ª–∞–¥–∫–∞ 1)
        uploaded_file = st.file_uploader("–í—ã–±—Ä–∞—Ç—å CSV —Ñ–∞–π–ª", type=['csv', 'xlsx'], on_change=reset_session_state)
        if uploaded_file is not None:
            
            prediction_button = st.button('–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å', type='primary', use_container_width=True, key='button1')
            st.session_state['df_input'] = pd.read_csv(uploaded_file)
            if prediction_button:
                # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ session state
                st.session_state['df_predicted'] = predict_sales_df(st.session_state['df_input'])
                st.session_state['tab_selected'] = 'tab1'

    with tab2:
        # –í–∫–ª–∞–¥–∫–∞ —Å –≤–≤–æ–¥–æ–º –¥–∞–Ω–Ω—ã—Ö –≤—Ä—É—á–Ω—É—é, –≤—ã–±–æ—Ä–æ–º –ø–æ—Ä–æ–≥–∞ –∏ –∫–Ω–æ–ø–∫–æ–π –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è (–≤–∫–ª–∞–¥–∫–∞ 2)
        date = st.text_input('Prediction date', placeholder='yyyy-dd-mm', help='–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ yyyy-dd-mm')
        store = st.slider( '–ù–æ–º–µ—Ä –º–∞–≥–∞–∑–∏–Ω–∞', 1, 45, 1, 1, key='slider1')
        holiday_flag = st.selectbox('–ü—Ä–∞–∑–¥–Ω–∏–∫–∏ –Ω–∞ –Ω–µ–¥–µ–ª–µ', ('yes', 'no'))
        temperature = st.slider('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ —Ñ–∞—Ä–µ–Ω–≥–µ–π—Ç–∞—Ö', -20.0, 120.0, 50.0, 0.1, key='slider2')
        fuel_price = st.slider('–¶–µ–Ω–∞ –Ω–∞ –±–µ–Ω–∑–∏–Ω', 0.000, 5.000, 2.500, 0.001, key='slider3')
        cpi = st.slider('–ò–Ω–¥–µ–∫—Å –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–∏—Ö —Ü–µ–Ω', 0.000, 300.000, 150.000, 0.001, key='slider4')
        unemployment = st.slider('–£—Ä–æ–≤–µ–Ω—å –±–µ–∑—Ä–∞–±–æ—Ç–∏—Ü—ã', 0.000, 20.000, 10.000, 0.001, key='slider5')
    
        # –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–∞ –¥–∞—Ç–∞, —Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–∞–π–¥–µ—Ä —Å –ø–æ—Ä–æ–≥–æ–º –∏ –∫–Ω–æ–ø–∫—É –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        if date != '':
            prediction_button_tab2 = st.button('–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å', type='primary', use_container_width=True, key='button2')
            
            if prediction_button_tab2:
                st.session_state['tab_selected'] = 'tab2'
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ session state –≤ –≤–∏–¥–µ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞
                st.session_state['df_input'] = pd.DataFrame({
                    'Store': store,
                    'Date': date,
                    'Holiday_Flag': 1 if holiday_flag == 'yes' else 0,
                    'Temperature': temperature,
                    'Fuel_Price': fuel_price,
                    'CPI': cpi,
                    'Unemployment': unemployment
                }, index=[0])
                # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ session state
                st.session_state['df_predicted'] = predict_sales_one(st.session_state['df_input'])

                

# Sidebar section end

# Main section start
# –û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫
st.image('https://rbkgames.com/files/editor_uploads/Rins/gta/%D0%9D%D0%BE%D0%B2%D0%B0%D1%8F%D0%9F%D0%B0%D0%BF%D0%BA%D0%B0%2056/wall2.jpg', width=400)
st.title('–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂ –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º —Å–µ—Ç–∏ Wallmart')

with st.expander("–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"):
    st.write("""
    –í –¥–∞–Ω–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –º—ã –±—É–¥–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–∞—Ö —Å–µ—Ç–∏ Wallmart.
    –ù–∞—à–∞ –∑–∞–¥–∞—á–∞ - –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –º–æ–¥–µ–ª—å, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–¥–µ–ª—å–Ω—É—é –ø—Ä–æ–¥–∞–∂—É.
    """)

# –í—ã–≤–æ–¥ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º)
if len(st.session_state['df_input']) > 0:
    # –ï—Å–ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –µ—â–µ –Ω–µ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ, —Ç–æ –≤—ã–≤–æ–¥–∏–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ–±—â–µ–º –≤–∏–¥–µ
    if len(st.session_state['df_predicted']) == 0:
        st.subheader('–î–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞')
        st.write(st.session_state['df_input'])
    else:
        # –ï—Å–ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —É–∂–µ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ, —Ç–æ –≤—ã–≤–æ–¥–∏–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ expander
        with st.expander("–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"):
            st.write(st.session_state['df_input'])
    # –ü—Ä–∏–º–µ—Ä—ã –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
    # st.line_chart(st.session_state['df_input'][['tenure', 'monthlycharges']])
    # st.bar_chart(st.session_state['df_input'][['contract']])


# –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–π –¥–∞—Ç—ã (–≤–∫–ª–∞–¥–∫–∞ 2)
if len(st.session_state['df_predicted']) > 0 and st.session_state['tab_selected'] == 'tab2':
    st.image('https://i.pinimg.com/originals/a8/60/ca/a860ca1982b938e1048ab522f0af2802.jpg', width=200)
    st.subheader(f'–ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–∞–∂ –Ω–∞ {st.session_state["df_input"]["Date"][0]}: —Å–æ—Å—Ç–∞–≤–∏—Ç {st.session_state["df_predicted"]["Weekly_Sales_predicted"][0]}')




# –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –∫–ª–∏–Ω—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ (–≤–∫–ª–∞–¥–∫–∞ 1)
if len(st.session_state['df_predicted']) > 0 and st.session_state['tab_selected'] == 'tab1':
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ —Ñ–∞–π–ª–µ
    st.subheader('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è')
    st.write(st.session_state['df_predicted'])
    # –°–∫–∞—á–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ —Ñ–∞–π–ª–µ
    res_all_csv = convert_df(st.session_state['df_predicted'])
    st.download_button(
        label="–°–∫–∞—á–∞—Ç—å –≤—Å–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è",
        data=res_all_csv,
        file_name='df-churn-predicted-all.csv',
        mime='text/csv',
    )

    